[project]
name = "genshin"
version = "1.7.13"
description = "API wrapper for HoYoLAB/Miyoushe API built on asyncio and pydantic."
readme = "README.md"
requires-python = ">=3.9"
dependencies = ["aiohttp==3.*", "pydantic==2.*", "tenacity==9.*"]
license = { file = "LICENSE" }
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Typing :: Typed",
]

[project.optional-dependencies]
all = [
    "aiohttp-socks>=0.9.0",
    "aioredis>=2.0.1",
    "aiosqlite>=0.17.0",
    "browser-cookie3>=0.19.1",
    "click>=8.1.7",
    "qrcode[pil]>=7.4.2",
    "rsa>=4.9",
]
cookies = ["browser-cookie3>=0.19.1"]
auth = ["qrcode[pil]>=7.4.2", "rsa>=4.9"]
cli = ["click>=8.1.7"]
socks-proxy = ["aiohttp-socks>=0.9.0"]
docs = [
    "mkdocs-material>=9.5.38",
    "pdoc3>=0.11.1",
]
lint = ["ruff>=0.6.8"]
pytest = [
    "coverage[toml]>=7.6.1",
    "devtools>=0.12.2",
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "pytest-dotenv>=0.5.2",
]
reformat = ["black>=24.8.0", "ruff>=0.6.8"]
typecheck = ["mypy>=1.11.2", "pyright>=1.1.382.post0", "types-click>=7.1.8"]
redis = ["aioredis>=2.0.1"]
sqlite = ["aiosqlite>=0.17.0"]

[project.urls]
Homepage = "https://github.com/seriaati/genshin.py"
Documentation = "https://seriaati.github.io/genshin.py"
Repository = "https://github.com/seriaati/genshin.py.git"
Issues = "https://github.com/seriaati/genshin.py/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["genshin"]

[tool.black]
line-length = 120

[tool.ruff]
line-length = 120
target-version = "py39"

[tool.ruff.lint]
select = ["A", "C4", "C9", "D", "E", "F", "S", "W", "T20", "PT", "RSE"]
exclude = ["tests", "test.py"]

# A001, A002, A003: `id` variable/parameter/attribute
# C408: dict() with keyword arguments
# D101: Missing docstring in public module
# D105: Missing docstring in magic method
# D106: Missing docstring Model.Config
# D400: First line should end with a period
# D419: Docstring is empty
# PT007: Wrong values type in `@pytest.mark.parametrize` expected `list` of `tuple`
# PT018: Assertion should be broken down into multiple parts
# S101: Use of assert for type checking
# S303: Use of md5
# S311: Use of pseudo-random generators
# S324: Use of md5 without usedforsecurity=False (3.9+)
# A005: Module `X` shadows a Python standard-library module
ignore = [
    "A001",
    "A002",
    "A003",
    "C408",
    "D100",
    "D105",
    "D106",
    "D400",
    "D419",
    "PT007",
    "PT018",
    "S101",
    "S303",
    "S311",
    "S324",
    "A005"
]

# auto-fixing too intrusive
# F401: Unused import
# F841: Unused variable
# B007: Unused loop variable
unfixable = ["F401", "F841", "B007"]

[tool.ruff.lint.per-file-ignores]
# F401: unused import.
# F403: cannot detect unused vars if we use starred import
# D10*: docstrings
# S10*: hardcoded passwords
# F841: unused variable
"**/__init__.py" = ["F401", "F403"]
"tests/**" = ["D10", "S10", "F841"]

[tool.ruff.lint.mccabe]
max-complexity = 16

[tool.ruff.lint.pycodestyle]
max-line-length = 130

[tool.ruff.lint.pydocstyle]
convention = "numpy"
ignore-decorators = ["property"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]

[tool.pyright]
include = ["genshin"]
exclude = ["**/__init__.py", "tests/**"]

typeCheckingMode = "strict"
reportMissingTypeStubs = "none"
reportImportCycles = "none"
reportIncompatibleMethodOverride = "none"   # This relies on ordering for keyword-only arguments
reportUnusedFunction = "none"               # Makes usage of validators impossible
reportPrivateUsage = "none"
reportUnknownMemberType = "none"
reportUntypedFunctionDecorator = "none"
reportIncompatibleVariableOverride = "none"

[tool.mypy]
warn_unreachable = false

disallow_untyped_defs = true
ignore_missing_imports = true

# pyright
warn_unused_ignores = false
warn_redundant_casts = false
allow_redefinition = true
disable_error_code = ["return-value"]


[tool.coverage.run]
source = ["genshin"]
omit = ["**/__init__.py", "**/__main__.py"]

[tool.coverage.report]
show_missing = true
skip_covered = false
sort = "cover"

[tool.uv]
dev-dependencies = ["nox>=2024.4.15"]
